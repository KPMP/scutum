buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:3.2.5")
    }
}

plugins {
    id 'java'
    id 'com.palantir.docker' version '0.35.0'
    id 'org.springframework.boot' version '3.2.5'
}

group = 'kingstonduo'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'

sourceCompatibility = '21'
targetCompatibility = '21'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'com.auth0:java-jwt:4.4.0'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.jsoup:jsoup:1.18.3'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation('org.mockito:mockito-junit-jupiter:3.12.4')
}

version='2.2'

springBoot {
	mainClass = "org.kpmp.Application"
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

def getCurrentGitBranch() {
  if (project.hasProperty('tag')) {
    def tagValue = project.property('tag')
    return tagValue
  } else {
      def gitBranch = "Unknown branch"
      try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
      } catch (e) {
        }
        if (gitBranch == "develop" || gitBranch == "master"){
          return project.version
        }else{
          return gitBranch
        }
    }
}

docker {
    name "kingstonduo/user-auth:" + getCurrentGitBranch()
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}
